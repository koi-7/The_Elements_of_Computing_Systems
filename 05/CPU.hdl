// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // decode
    And16(a=instruction, b=instruction,
          out[15]=inst,
          out[12]=a,
          out[11]=c1, out[10]=c2, out[9]=c3, out[8]=c4, out[7]=c5, out[6]=c6,
          out[5]=d1, out[4]=d2, out[3]=d3,
          out[2]=j1, out[1]=j2, out[0]=j3);

    // writeM
    And(a=inst, b=d3, out=writeM);

    // A register
    Mux16(a=instruction, b=fromALU, sel=inst, out=toAreg);
    Not(in=inst, out=notinst);
    Or(a=notinst, b=d1, out=loadAreg);
    ARegister(in=toAreg, load=loadAreg, out=fromAreg, out[0..14]=addressM);

    // D register
    And(a=inst, b=d2, out=loadDreg);
    DRegister(in=fromALU, load=loadDreg, out=fromDreg);

    // ALU
    Mux16(a=fromAreg, b=inM, sel=a, out=toALU);
    ALU(x=fromDreg, y=toALU, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
        out=fromALU, out=outM, zr=zr, ng=ng);

    // No jump
    Or(a=j1, b=j2, out=njump0);
    Or(a=njump0, b=j3, out=njump1);
    Not(in=njump1, out=njump2);
    Or(a=notinst, b=njump2, out=PCinc);

    // jump
    Not(in=j1, out=nj1);
    Not(in=j2, out=nj2);
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);

    And(a=nj1, b=j3, out=tmp0);     // JGT, JGE1
    And(a=tmp0, b=nzr, out=tmp1);
    And(a=tmp1, b=nng, out=jump0);

    And(a=nj1, b=j2, out=tmp2);     // JEQ, JGE2
    And(a=tmp2, b=zr, out=tmp3);
    And(a=tmp3, b=nng, out=jump1);

    And(a=j1, b=nj2, out=tmp4);     // JNE
    And(a=tmp4, b=j3, out=tmp5);
    And(a=tmp5, b=nzr, out=jump2);

    And(a=j1, b=nzr, out=tmp6);     // JLT
    And(a=tmp6, b=ng, out=jump3);

    And(a=j1, b=j2, out=tmp7);      // JLE
    Xor(a=zr, b=ng, out=tmp8);
    And(a=tmp7, b=tmp8, out=jump4);

    And(a=j1, b=j2, out=tmp9);      // Jump
    And(a=tmp9, b=j3, out=jump5);

    Or8Way(in[0]=jump0, in[1]=jump1, in[2]=jump2, in[3]=jump3, in[4]=jump4,
           in[5]=jump5, in[6..7]=false, out=jump);
    And(a=jump, b=inst, out=PCload);

    // PC
    PC(in=fromAreg, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
}
