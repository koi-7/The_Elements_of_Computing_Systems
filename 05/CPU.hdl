// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // decode
    And16(a=instruction, b=instruction,
          out[15]=loadAreg,
          out[12]=a,
          out[11]=c1, out[10]=c2, out[9]=c3, out[8]=c4, out[7]=c5, out[6]=c6,
          out[5]=d1, out[4]=d2, out[3]=d3,
          out[2]=j1, out[1]=j2, out[0]=j3);

    // A register
    Mux16(a=fromALU, b=instruction, sel=loadAreg, out=toAreg, out[0..14]=addressM);
    ARegister(in=toAreg, load=d1, out=fromAreg);

    // ALU
    Mux16(a=fromAreg, b=inM, sel=a, out=toALU);
    ALU(x=fromDreg, y=toALU, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
        out=fromALU, out=outM, zr=zr, ng=ng);

    // D register
    DRegister(in=fromALU, load=d2, out=fromDreg);

    // inc to PC (No jump)
    Not(in=j1, out=notj1);
    Not(in=j2, out=notj2);
    Not(in=j3, out=notj3);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    And(a=notj1, b=notj2, out=o0);
    And(a=o0, b=notj3, out=PCinc);

    // load frag for PC
    // JGT (out > 0)
    And(a=notj1, b=notj2, out=o1);
    And(a=j3, b=notzr, out=o2);
    And(a=o1, b=o2, out=o3);
    And(a=o3, b=notng, out=jgt);
    // JEQ (out = 0)
    And(a=notj1, b=j2, out=o4);
    And(a=notj3, b=zr, out=o5);
    And(a=o4, b=o5, out=o6);
    And(a=o6, b=notng, out=jeq);
    // JGE (out >= 0)
    And(a=notj1, b=j2, out=o7);
    And(a=j3, b=notng, out=o8);
    And(a=o7, b=o8, out=jge);
    // JLT (out < 0)
    And(a=j1, b=notj2, out=o9);
    And(a=notj3, b=notzr, out=o10);
    And(a=o9, b=o10, out=o11);
    And(a=o11, b=ng, out=jlt);
    // JNE (out != 0)
    And(a=j1, b=notj2, out=o12);
    And(a=o12, b=j3, out=jne);
    // JLE (out <= 0)
    And(a=j1, b=j2, out=o13);
    And(a=o13, b=notj3, out=jle);
    // JGT (Jump)
    And(a=j1, b=j2, out=o14);
    And(a=o14, b=j3, out=jmp);

    Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jge, in[3]=jlt,
           in[4]=jne, in[5]=jle, in[6]=jmp, in[7]=false,
           out=PCload);



    // PC
    PC(in=fromAreg, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
}
