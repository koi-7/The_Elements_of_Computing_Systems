// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array memory;

    static Array freeList;
    static int heapBase;
    static int heapLength;
    static int length;
    static int next;

    /** Initializes the class. */
    function void init() {
        let memory = 0;

        let heapBase = 2048;
        let heapLength = 16383 - heapBase;
        let length = 0;
        let next = 1;

        let freeList = heapBase;
        let freeList[length] = heapLength;
        let freeList[next] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array current_pointer, previous_pointer, block;

        let current_pointer = freeList;
        let previous_pointer = current_pointer;

        while (~(current_pointer[length] > size)) {
            let previous_pointer = current_pointer;
            let current_pointer = current_pointer[next];
            if (current_pointer = null) {
                do Output.printInt(size);
                do Output.println();
                return -1;  // 失敗
            }
        }

        let block = current_pointer + 1;
        let previous_pointer[next] = current_pointer[next];

        let block[-1] = size + 1;

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;

        let segment = o - 1;
        let segment[length] = o[-1];

        let segment[next] = freeList[next];
        let freeList[next] = segment;

        return;
    }
}
