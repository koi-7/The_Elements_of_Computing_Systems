// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;

        let i = 1;

        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        } else {
            return -x;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int j;

        if ((x = 0) | (y = 0)) {
            return 0;
        } else {
            let sum = 0;
            let shiftedX = x;
            let j = 0;

            while (j < 16) {
                if (Math.bit(y, j)) {
                    let sum = sum + shiftedX;
                }
                let shiftedX = shiftedX + shiftedX;
                let j = j + 1;
            }
            return sum;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int abs_x, abs_y, q, result;
        var boolean neg;

        if (x = 0) { return 0; }
        if (y = 1) { return x; }

        let neg = false;
        if (x < 0) { let neg = ~neg; }
        if (y < 0) { let neg = ~neg; }

        let abs_x = Math.abs(x);
        let abs_y = Math.abs(y);

        if (abs_x < abs_y) {
            let result = 0;
        } else {
            let q = Math.divide(abs_x, abs_y + abs_y);
            if ((abs_x - Math.multiply(q, abs_y) - Math.multiply(q, abs_y)) < abs_y) {
                let result = q + q;
            } else {
                let result = q + q + 1;
            }
        }

        if (neg) {
            return -result;
        } else {
            return result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j;
        var int i, pow2j;

        if (x = 0) { return 0; }

        let y = 0;
        let j = Math.divide(16, 2);

        while (j > -1) {
            // 2 ** j の計算
            let i = j;
            let pow2j = 1;
            while (i > 0) {
                let pow2j = Math.multiply(2, pow2j);
                let i = i - 1;
            }

            // sqrt x の計算
            if (((Math.multiply((y + pow2j),(y + pow2j)) < x) | (Math.multiply((y + pow2j),(y + pow2j)) = x)) & ((Math.multiply((y + pow2j),(y + pow2j)) > 0))) {
                let y = y + pow2j;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if ((a = b) | (a > b)) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if ((a = b) | (a > b)) {
            return b;
        } else {
            return a;
        }
    }

    /** 整数 x の j（j = 0..15）番目のビットが 1 であれば true を返し、
     *  それ以外は false を返す。
     */
    function boolean bit(int x, int j) {
        if ((x & twoToThe[j]) = 0) {
            return false;
        } else {
            return true;
        }
    }
}
