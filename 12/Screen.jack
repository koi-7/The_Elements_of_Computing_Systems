// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int start, end;
        var int address;

        let start = 16384;
        let end = 24575;

        do Screen.setColor(false);
        let address = start;
        while (address < (end + 1)) {
            do Memory.poke(address, color);
            let address = address + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, loop, i, value;

        let address = 16384 + (y * 32) + (x / 16);

        let loop = x - ((x / 16) * 16);
        let value = 1;
        let i = 0;
        while (i < loop) {
            let value = value * 2;
            let i = i + 1;
        }

        if (color) {
            do Memory.poke(address, (value | Memory.peek(address)));
        } else {
            do Memory.poke(address, (~value & Memory.peek(address)));
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, adyMinusbdy;

        // 必ず dx > 0 になるよう調整
        if (x1 > x2) { do Screen.drawLine(x2, y2, x1, y1); }

        // 縦線の描画
        if (x1 = x2) {
            if (y1 < y2) {
                let y = y1;
                while (~(y > y2)) {
                    do Screen.drawPixel(x1, y);
                    let y = y + 1;
                }
            } else {
                let y = y2;
                while (~(y > y1)) {
                    do Screen.drawPixel(x1, y);
                    let y = y + 1;
                }
            }
            return;
        }

        // 横線の描画
        if (y1 = y2) {
            let x = x1;
            while (~(x > x2)) {
                do Screen.drawPixel(x, y1);
                let x = x + 1;
            }
            return;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let adyMinusbdy = 0;

        if (dy > 0) {
            while ((~(a > dx)) & (~(b > dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdy < 0) {
                    let a = a + 1;
                    let adyMinusbdy = adyMinusbdy + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdy = adyMinusbdy - dx;
                }
            }
            return;
        }

        if (dy < 0) {
            while ((~(a > dx)) & (~(b < dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdy < 0) {
                    let a = a + 1;
                    let adyMinusbdy = adyMinusbdy - dy;
                } else {
                    let b = b - 1;
                    let adyMinusbdy = adyMinusbdy - dx;
                }
            }
            return;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int loop;

        if (y1 > y2) {
            do Screen.drawRectangle(x2, y2, x1, y1);
        }

        let loop = y1;
        while (~(loop > y2)) {
            do Screen.drawLine(x1, loop, x2, loop);
            let loop = loop + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, tmp;

        let dy= -r;
        while (~(dy > r)) {
            let tmp = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - tmp, y + dy, x + tmp, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
